// Lab7.v

// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module Lab7 (
		input  wire        clk_clk,           //        clk.clk
		output wire [13:0] hex_1_2_export,    //    hex_1_2.export
		output wire [13:0] hex_3_4_export,    //    hex_3_4.export
		output wire [13:0] hex_5_6_export,    //    hex_5_6.export
		output wire [9:0]  leds_export,       //       leds.export
		input  wire [3:0]  pushbutton_export, // pushbutton.export
		output wire [6:0]  rooms_hex2,        //      rooms.hex2
		output wire [6:0]  rooms_hex1,        //           .hex1
		output wire [6:0]  rooms_hex3,        //           .hex3
		output wire        rooms_leds_out,    //           .leds_out
		input  wire [9:0]  sw_sliders_export  // sw_sliders.export
	);

	wire         processor1_debug_reset_request_reset;                        // Processor1:debug_reset_request -> [rst_controller:reset_in0, rst_controller:reset_in1, rst_controller_001:reset_in0, rst_controller_001:reset_in2, rst_controller_002:reset_in0, rst_controller_003:reset_in0]
	wire  [31:0] processor1_data_master_readdata;                             // mm_interconnect_0:Processor1_data_master_readdata -> Processor1:d_readdata
	wire         processor1_data_master_waitrequest;                          // mm_interconnect_0:Processor1_data_master_waitrequest -> Processor1:d_waitrequest
	wire         processor1_data_master_debugaccess;                          // Processor1:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:Processor1_data_master_debugaccess
	wire  [19:0] processor1_data_master_address;                              // Processor1:d_address -> mm_interconnect_0:Processor1_data_master_address
	wire   [3:0] processor1_data_master_byteenable;                           // Processor1:d_byteenable -> mm_interconnect_0:Processor1_data_master_byteenable
	wire         processor1_data_master_read;                                 // Processor1:d_read -> mm_interconnect_0:Processor1_data_master_read
	wire         processor1_data_master_write;                                // Processor1:d_write -> mm_interconnect_0:Processor1_data_master_write
	wire  [31:0] processor1_data_master_writedata;                            // Processor1:d_writedata -> mm_interconnect_0:Processor1_data_master_writedata
	wire  [31:0] processor2_data_master_readdata;                             // mm_interconnect_0:Processor2_data_master_readdata -> Processor2:d_readdata
	wire         processor2_data_master_waitrequest;                          // mm_interconnect_0:Processor2_data_master_waitrequest -> Processor2:d_waitrequest
	wire         processor2_data_master_debugaccess;                          // Processor2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:Processor2_data_master_debugaccess
	wire  [19:0] processor2_data_master_address;                              // Processor2:d_address -> mm_interconnect_0:Processor2_data_master_address
	wire   [3:0] processor2_data_master_byteenable;                           // Processor2:d_byteenable -> mm_interconnect_0:Processor2_data_master_byteenable
	wire         processor2_data_master_read;                                 // Processor2:d_read -> mm_interconnect_0:Processor2_data_master_read
	wire         processor2_data_master_write;                                // Processor2:d_write -> mm_interconnect_0:Processor2_data_master_write
	wire  [31:0] processor2_data_master_writedata;                            // Processor2:d_writedata -> mm_interconnect_0:Processor2_data_master_writedata
	wire  [31:0] processor2_instruction_master_readdata;                      // mm_interconnect_0:Processor2_instruction_master_readdata -> Processor2:i_readdata
	wire         processor2_instruction_master_waitrequest;                   // mm_interconnect_0:Processor2_instruction_master_waitrequest -> Processor2:i_waitrequest
	wire  [19:0] processor2_instruction_master_address;                       // Processor2:i_address -> mm_interconnect_0:Processor2_instruction_master_address
	wire         processor2_instruction_master_read;                          // Processor2:i_read -> mm_interconnect_0:Processor2_instruction_master_read
	wire  [31:0] processor1_instruction_master_readdata;                      // mm_interconnect_0:Processor1_instruction_master_readdata -> Processor1:i_readdata
	wire         processor1_instruction_master_waitrequest;                   // mm_interconnect_0:Processor1_instruction_master_waitrequest -> Processor1:i_waitrequest
	wire  [19:0] processor1_instruction_master_address;                       // Processor1:i_address -> mm_interconnect_0:Processor1_instruction_master_address
	wire         processor1_instruction_master_read;                          // Processor1:i_read -> mm_interconnect_0:Processor1_instruction_master_read
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;    // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_chipselect -> JTAG_UART:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;      // JTAG_UART:av_readdata -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;   // JTAG_UART:av_waitrequest -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;       // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_address -> JTAG_UART:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;          // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_read -> JTAG_UART:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;         // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_write -> JTAG_UART:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;     // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_writedata -> JTAG_UART:av_writedata
	wire  [31:0] mm_interconnect_0_processor1_debug_mem_slave_readdata;       // Processor1:debug_mem_slave_readdata -> mm_interconnect_0:Processor1_debug_mem_slave_readdata
	wire         mm_interconnect_0_processor1_debug_mem_slave_waitrequest;    // Processor1:debug_mem_slave_waitrequest -> mm_interconnect_0:Processor1_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_processor1_debug_mem_slave_debugaccess;    // mm_interconnect_0:Processor1_debug_mem_slave_debugaccess -> Processor1:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_processor1_debug_mem_slave_address;        // mm_interconnect_0:Processor1_debug_mem_slave_address -> Processor1:debug_mem_slave_address
	wire         mm_interconnect_0_processor1_debug_mem_slave_read;           // mm_interconnect_0:Processor1_debug_mem_slave_read -> Processor1:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_processor1_debug_mem_slave_byteenable;     // mm_interconnect_0:Processor1_debug_mem_slave_byteenable -> Processor1:debug_mem_slave_byteenable
	wire         mm_interconnect_0_processor1_debug_mem_slave_write;          // mm_interconnect_0:Processor1_debug_mem_slave_write -> Processor1:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_processor1_debug_mem_slave_writedata;      // mm_interconnect_0:Processor1_debug_mem_slave_writedata -> Processor1:debug_mem_slave_writedata
	wire         mm_interconnect_0_ram1_s1_chipselect;                        // mm_interconnect_0:RAM1_s1_chipselect -> RAM1:chipselect
	wire  [31:0] mm_interconnect_0_ram1_s1_readdata;                          // RAM1:readdata -> mm_interconnect_0:RAM1_s1_readdata
	wire  [15:0] mm_interconnect_0_ram1_s1_address;                           // mm_interconnect_0:RAM1_s1_address -> RAM1:address
	wire   [3:0] mm_interconnect_0_ram1_s1_byteenable;                        // mm_interconnect_0:RAM1_s1_byteenable -> RAM1:byteenable
	wire         mm_interconnect_0_ram1_s1_write;                             // mm_interconnect_0:RAM1_s1_write -> RAM1:write
	wire  [31:0] mm_interconnect_0_ram1_s1_writedata;                         // mm_interconnect_0:RAM1_s1_writedata -> RAM1:writedata
	wire         mm_interconnect_0_ram1_s1_clken;                             // mm_interconnect_0:RAM1_s1_clken -> RAM1:clken
	wire         mm_interconnect_0_sw_sliders_s1_chipselect;                  // mm_interconnect_0:sw_sliders_s1_chipselect -> sw_sliders:chipselect
	wire  [31:0] mm_interconnect_0_sw_sliders_s1_readdata;                    // sw_sliders:readdata -> mm_interconnect_0:sw_sliders_s1_readdata
	wire   [1:0] mm_interconnect_0_sw_sliders_s1_address;                     // mm_interconnect_0:sw_sliders_s1_address -> sw_sliders:address
	wire         mm_interconnect_0_sw_sliders_s1_write;                       // mm_interconnect_0:sw_sliders_s1_write -> sw_sliders:write_n
	wire  [31:0] mm_interconnect_0_sw_sliders_s1_writedata;                   // mm_interconnect_0:sw_sliders_s1_writedata -> sw_sliders:writedata
	wire         mm_interconnect_0_timer1_s1_chipselect;                      // mm_interconnect_0:Timer1_s1_chipselect -> Timer1:chipselect
	wire  [15:0] mm_interconnect_0_timer1_s1_readdata;                        // Timer1:readdata -> mm_interconnect_0:Timer1_s1_readdata
	wire   [2:0] mm_interconnect_0_timer1_s1_address;                         // mm_interconnect_0:Timer1_s1_address -> Timer1:address
	wire         mm_interconnect_0_timer1_s1_write;                           // mm_interconnect_0:Timer1_s1_write -> Timer1:write_n
	wire  [15:0] mm_interconnect_0_timer1_s1_writedata;                       // mm_interconnect_0:Timer1_s1_writedata -> Timer1:writedata
	wire         mm_interconnect_0_shared_memory_s1_chipselect;               // mm_interconnect_0:SHARED_MEMORY_s1_chipselect -> SHARED_MEMORY:chipselect
	wire  [31:0] mm_interconnect_0_shared_memory_s1_readdata;                 // SHARED_MEMORY:readdata -> mm_interconnect_0:SHARED_MEMORY_s1_readdata
	wire   [9:0] mm_interconnect_0_shared_memory_s1_address;                  // mm_interconnect_0:SHARED_MEMORY_s1_address -> SHARED_MEMORY:address
	wire   [3:0] mm_interconnect_0_shared_memory_s1_byteenable;               // mm_interconnect_0:SHARED_MEMORY_s1_byteenable -> SHARED_MEMORY:byteenable
	wire         mm_interconnect_0_shared_memory_s1_write;                    // mm_interconnect_0:SHARED_MEMORY_s1_write -> SHARED_MEMORY:write
	wire  [31:0] mm_interconnect_0_shared_memory_s1_writedata;                // mm_interconnect_0:SHARED_MEMORY_s1_writedata -> SHARED_MEMORY:writedata
	wire         mm_interconnect_0_shared_memory_s1_clken;                    // mm_interconnect_0:SHARED_MEMORY_s1_clken -> SHARED_MEMORY:clken
	wire         mm_interconnect_0_mutex_s1_chipselect;                       // mm_interconnect_0:MUTEX_s1_chipselect -> MUTEX:chipselect
	wire  [31:0] mm_interconnect_0_mutex_s1_readdata;                         // MUTEX:data_to_cpu -> mm_interconnect_0:MUTEX_s1_readdata
	wire   [0:0] mm_interconnect_0_mutex_s1_address;                          // mm_interconnect_0:MUTEX_s1_address -> MUTEX:address
	wire         mm_interconnect_0_mutex_s1_read;                             // mm_interconnect_0:MUTEX_s1_read -> MUTEX:read
	wire         mm_interconnect_0_mutex_s1_write;                            // mm_interconnect_0:MUTEX_s1_write -> MUTEX:write
	wire  [31:0] mm_interconnect_0_mutex_s1_writedata;                        // mm_interconnect_0:MUTEX_s1_writedata -> MUTEX:data_from_cpu
	wire         mm_interconnect_0_pushbutton_s1_chipselect;                  // mm_interconnect_0:pushbutton_s1_chipselect -> pushbutton:chipselect
	wire  [31:0] mm_interconnect_0_pushbutton_s1_readdata;                    // pushbutton:readdata -> mm_interconnect_0:pushbutton_s1_readdata
	wire   [1:0] mm_interconnect_0_pushbutton_s1_address;                     // mm_interconnect_0:pushbutton_s1_address -> pushbutton:address
	wire         mm_interconnect_0_pushbutton_s1_write;                       // mm_interconnect_0:pushbutton_s1_write -> pushbutton:write_n
	wire  [31:0] mm_interconnect_0_pushbutton_s1_writedata;                   // mm_interconnect_0:pushbutton_s1_writedata -> pushbutton:writedata
	wire  [31:0] mm_interconnect_0_processor2_debug_mem_slave_readdata;       // Processor2:debug_mem_slave_readdata -> mm_interconnect_0:Processor2_debug_mem_slave_readdata
	wire         mm_interconnect_0_processor2_debug_mem_slave_waitrequest;    // Processor2:debug_mem_slave_waitrequest -> mm_interconnect_0:Processor2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_processor2_debug_mem_slave_debugaccess;    // mm_interconnect_0:Processor2_debug_mem_slave_debugaccess -> Processor2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_processor2_debug_mem_slave_address;        // mm_interconnect_0:Processor2_debug_mem_slave_address -> Processor2:debug_mem_slave_address
	wire         mm_interconnect_0_processor2_debug_mem_slave_read;           // mm_interconnect_0:Processor2_debug_mem_slave_read -> Processor2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_processor2_debug_mem_slave_byteenable;     // mm_interconnect_0:Processor2_debug_mem_slave_byteenable -> Processor2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_processor2_debug_mem_slave_write;          // mm_interconnect_0:Processor2_debug_mem_slave_write -> Processor2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_processor2_debug_mem_slave_writedata;      // mm_interconnect_0:Processor2_debug_mem_slave_writedata -> Processor2:debug_mem_slave_writedata
	wire         mm_interconnect_0_ram2_s1_chipselect;                        // mm_interconnect_0:RAM2_s1_chipselect -> RAM2:chipselect
	wire  [31:0] mm_interconnect_0_ram2_s1_readdata;                          // RAM2:readdata -> mm_interconnect_0:RAM2_s1_readdata
	wire  [14:0] mm_interconnect_0_ram2_s1_address;                           // mm_interconnect_0:RAM2_s1_address -> RAM2:address
	wire   [3:0] mm_interconnect_0_ram2_s1_byteenable;                        // mm_interconnect_0:RAM2_s1_byteenable -> RAM2:byteenable
	wire         mm_interconnect_0_ram2_s1_write;                             // mm_interconnect_0:RAM2_s1_write -> RAM2:write
	wire  [31:0] mm_interconnect_0_ram2_s1_writedata;                         // mm_interconnect_0:RAM2_s1_writedata -> RAM2:writedata
	wire         mm_interconnect_0_ram2_s1_clken;                             // mm_interconnect_0:RAM2_s1_clken -> RAM2:clken
	wire         mm_interconnect_0_timer2_s1_chipselect;                      // mm_interconnect_0:Timer2_s1_chipselect -> Timer2:chipselect
	wire  [15:0] mm_interconnect_0_timer2_s1_readdata;                        // Timer2:readdata -> mm_interconnect_0:Timer2_s1_readdata
	wire   [2:0] mm_interconnect_0_timer2_s1_address;                         // mm_interconnect_0:Timer2_s1_address -> Timer2:address
	wire         mm_interconnect_0_timer2_s1_write;                           // mm_interconnect_0:Timer2_s1_write -> Timer2:write_n
	wire  [15:0] mm_interconnect_0_timer2_s1_writedata;                       // mm_interconnect_0:Timer2_s1_writedata -> Timer2:writedata
	wire         mm_interconnect_0_hex_5_6_s1_chipselect;                     // mm_interconnect_0:Hex_5_6_s1_chipselect -> Hex_5_6:chipselect
	wire  [31:0] mm_interconnect_0_hex_5_6_s1_readdata;                       // Hex_5_6:readdata -> mm_interconnect_0:Hex_5_6_s1_readdata
	wire   [1:0] mm_interconnect_0_hex_5_6_s1_address;                        // mm_interconnect_0:Hex_5_6_s1_address -> Hex_5_6:address
	wire         mm_interconnect_0_hex_5_6_s1_write;                          // mm_interconnect_0:Hex_5_6_s1_write -> Hex_5_6:write_n
	wire  [31:0] mm_interconnect_0_hex_5_6_s1_writedata;                      // mm_interconnect_0:Hex_5_6_s1_writedata -> Hex_5_6:writedata
	wire         mm_interconnect_0_hex_3_4_s1_chipselect;                     // mm_interconnect_0:Hex_3_4_s1_chipselect -> Hex_3_4:chipselect
	wire  [31:0] mm_interconnect_0_hex_3_4_s1_readdata;                       // Hex_3_4:readdata -> mm_interconnect_0:Hex_3_4_s1_readdata
	wire   [1:0] mm_interconnect_0_hex_3_4_s1_address;                        // mm_interconnect_0:Hex_3_4_s1_address -> Hex_3_4:address
	wire         mm_interconnect_0_hex_3_4_s1_write;                          // mm_interconnect_0:Hex_3_4_s1_write -> Hex_3_4:write_n
	wire  [31:0] mm_interconnect_0_hex_3_4_s1_writedata;                      // mm_interconnect_0:Hex_3_4_s1_writedata -> Hex_3_4:writedata
	wire         mm_interconnect_0_hex_1_2_s1_chipselect;                     // mm_interconnect_0:Hex_1_2_s1_chipselect -> Hex_1_2:chipselect
	wire  [31:0] mm_interconnect_0_hex_1_2_s1_readdata;                       // Hex_1_2:readdata -> mm_interconnect_0:Hex_1_2_s1_readdata
	wire   [1:0] mm_interconnect_0_hex_1_2_s1_address;                        // mm_interconnect_0:Hex_1_2_s1_address -> Hex_1_2:address
	wire         mm_interconnect_0_hex_1_2_s1_write;                          // mm_interconnect_0:Hex_1_2_s1_write -> Hex_1_2:write_n
	wire  [31:0] mm_interconnect_0_hex_1_2_s1_writedata;                      // mm_interconnect_0:Hex_1_2_s1_writedata -> Hex_1_2:writedata
	wire         mm_interconnect_0_leds_s1_chipselect;                        // mm_interconnect_0:leds_s1_chipselect -> leds:chipselect
	wire  [31:0] mm_interconnect_0_leds_s1_readdata;                          // leds:readdata -> mm_interconnect_0:leds_s1_readdata
	wire   [1:0] mm_interconnect_0_leds_s1_address;                           // mm_interconnect_0:leds_s1_address -> leds:address
	wire         mm_interconnect_0_leds_s1_write;                             // mm_interconnect_0:leds_s1_write -> leds:write_n
	wire  [31:0] mm_interconnect_0_leds_s1_writedata;                         // mm_interconnect_0:leds_s1_writedata -> leds:writedata
	wire         mm_interconnect_0_rooms_manager_0_avalon_slave_0_chipselect; // mm_interconnect_0:rooms_manager_0_avalon_slave_0_chipselect -> rooms_manager_0:cs
	wire         mm_interconnect_0_rooms_manager_0_avalon_slave_0_write;      // mm_interconnect_0:rooms_manager_0_avalon_slave_0_write -> rooms_manager_0:wr
	wire   [7:0] mm_interconnect_0_rooms_manager_0_avalon_slave_0_writedata;  // mm_interconnect_0:rooms_manager_0_avalon_slave_0_writedata -> rooms_manager_0:writedata
	wire         irq_mapper_receiver3_irq;                                    // Timer1:irq -> irq_mapper:receiver3_irq
	wire  [31:0] processor1_irq_irq;                                          // irq_mapper:sender_irq -> Processor1:irq
	wire         irq_mapper_001_receiver0_irq;                                // Timer2:irq -> irq_mapper_001:receiver0_irq
	wire  [31:0] processor2_irq_irq;                                          // irq_mapper_001:sender_irq -> Processor2:irq
	wire         irq_mapper_receiver2_irq;                                    // JTAG_UART:av_irq -> [irq_mapper:receiver2_irq, irq_mapper_001:receiver3_irq]
	wire         irq_mapper_receiver1_irq;                                    // pushbutton:irq -> [irq_mapper:receiver1_irq, irq_mapper_001:receiver1_irq]
	wire         irq_mapper_receiver0_irq;                                    // sw_sliders:irq -> [irq_mapper:receiver0_irq, irq_mapper_001:receiver2_irq]
	wire         rst_controller_reset_out_reset;                              // rst_controller:reset_out -> [Hex_1_2:reset_n, Hex_3_4:reset_n, Hex_5_6:reset_n, JTAG_UART:rst_n, Processor1:reset_n, RAM1:reset, Timer1:reset_n, irq_mapper:reset, leds:reset_n, mm_interconnect_0:Processor1_reset_reset_bridge_in_reset_reset, pushbutton:reset_n, rooms_manager_0:reset_reset, rst_translator:in_reset, sw_sliders:reset_n]
	wire         rst_controller_reset_out_reset_req;                          // rst_controller:reset_req -> [Processor1:reset_req, RAM1:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                          // rst_controller_001:reset_out -> [MUTEX:reset_n, SHARED_MEMORY:reset, mm_interconnect_0:SHARED_MEMORY_reset1_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset_req;                      // rst_controller_001:reset_req -> [SHARED_MEMORY:reset_req, rst_translator_001:reset_req_in]
	wire         processor2_debug_reset_request_reset;                        // Processor2:debug_reset_request -> [rst_controller_001:reset_in1, rst_controller_003:reset_in1]
	wire         rst_controller_002_reset_out_reset;                          // rst_controller_002:reset_out -> [Processor2:reset_n, irq_mapper_001:reset, mm_interconnect_0:Processor2_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset_req;                      // rst_controller_002:reset_req -> [Processor2:reset_req, rst_translator_002:reset_req_in]
	wire         rst_controller_003_reset_out_reset;                          // rst_controller_003:reset_out -> [RAM2:reset, Timer2:reset_n, mm_interconnect_0:RAM2_reset1_reset_bridge_in_reset_reset]
	wire         rst_controller_003_reset_out_reset_req;                      // rst_controller_003:reset_req -> [RAM2:reset_req, rst_translator_003:reset_req_in]

	Lab7_Hex_1_2 hex_1_2 (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_hex_1_2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_hex_1_2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_hex_1_2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_hex_1_2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_hex_1_2_s1_readdata),   //                    .readdata
		.out_port   (hex_1_2_export)                           // external_connection.export
	);

	Lab7_Hex_1_2 hex_3_4 (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_hex_3_4_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_hex_3_4_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_hex_3_4_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_hex_3_4_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_hex_3_4_s1_readdata),   //                    .readdata
		.out_port   (hex_3_4_export)                           // external_connection.export
	);

	Lab7_Hex_1_2 hex_5_6 (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_hex_5_6_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_hex_5_6_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_hex_5_6_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_hex_5_6_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_hex_5_6_s1_readdata),   //                    .readdata
		.out_port   (hex_5_6_export)                           // external_connection.export
	);

	Lab7_JTAG_UART jtag_uart (
		.clk            (clk_clk),                                                   //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver2_irq)                                   //               irq.irq
	);

	Lab7_MUTEX mutex (
		.reset_n       (~rst_controller_001_reset_out_reset),   // reset.reset_n
		.clk           (clk_clk),                               //   clk.clk
		.chipselect    (mm_interconnect_0_mutex_s1_chipselect), //    s1.chipselect
		.data_from_cpu (mm_interconnect_0_mutex_s1_writedata),  //      .writedata
		.read          (mm_interconnect_0_mutex_s1_read),       //      .read
		.write         (mm_interconnect_0_mutex_s1_write),      //      .write
		.data_to_cpu   (mm_interconnect_0_mutex_s1_readdata),   //      .readdata
		.address       (mm_interconnect_0_mutex_s1_address)     //      .address
	);

	Lab7_Processor1 processor1 (
		.clk                                 (clk_clk),                                                  //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                          //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                       //                          .reset_req
		.d_address                           (processor1_data_master_address),                           //               data_master.address
		.d_byteenable                        (processor1_data_master_byteenable),                        //                          .byteenable
		.d_read                              (processor1_data_master_read),                              //                          .read
		.d_readdata                          (processor1_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (processor1_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (processor1_data_master_write),                             //                          .write
		.d_writedata                         (processor1_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (processor1_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (processor1_instruction_master_address),                    //        instruction_master.address
		.i_read                              (processor1_instruction_master_read),                       //                          .read
		.i_readdata                          (processor1_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (processor1_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (processor1_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (processor1_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_processor1_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_processor1_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_processor1_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_processor1_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_processor1_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_processor1_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_processor1_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_processor1_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                          // custom_instruction_master.readra
	);

	Lab7_Processor2 processor2 (
		.clk                                 (clk_clk),                                                  //                       clk.clk
		.reset_n                             (~rst_controller_002_reset_out_reset),                      //                     reset.reset_n
		.reset_req                           (rst_controller_002_reset_out_reset_req),                   //                          .reset_req
		.d_address                           (processor2_data_master_address),                           //               data_master.address
		.d_byteenable                        (processor2_data_master_byteenable),                        //                          .byteenable
		.d_read                              (processor2_data_master_read),                              //                          .read
		.d_readdata                          (processor2_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (processor2_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (processor2_data_master_write),                             //                          .write
		.d_writedata                         (processor2_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (processor2_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (processor2_instruction_master_address),                    //        instruction_master.address
		.i_read                              (processor2_instruction_master_read),                       //                          .read
		.i_readdata                          (processor2_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (processor2_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (processor2_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (processor2_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_processor2_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_processor2_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_processor2_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_processor2_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_processor2_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_processor2_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_processor2_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_processor2_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                          // custom_instruction_master.readra
	);

	Lab7_RAM1 ram1 (
		.clk        (clk_clk),                              //   clk1.clk
		.address    (mm_interconnect_0_ram1_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_ram1_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_ram1_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_ram1_s1_write),      //       .write
		.readdata   (mm_interconnect_0_ram1_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_ram1_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_ram1_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),       // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),   //       .reset_req
		.freeze     (1'b0)                                  // (terminated)
	);

	Lab7_RAM2 ram2 (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_ram2_s1_address),      //     s1.address
		.clken      (mm_interconnect_0_ram2_s1_clken),        //       .clken
		.chipselect (mm_interconnect_0_ram2_s1_chipselect),   //       .chipselect
		.write      (mm_interconnect_0_ram2_s1_write),        //       .write
		.readdata   (mm_interconnect_0_ram2_s1_readdata),     //       .readdata
		.writedata  (mm_interconnect_0_ram2_s1_writedata),    //       .writedata
		.byteenable (mm_interconnect_0_ram2_s1_byteenable),   //       .byteenable
		.reset      (rst_controller_003_reset_out_reset),     // reset1.reset
		.reset_req  (rst_controller_003_reset_out_reset_req), //       .reset_req
		.freeze     (1'b0)                                    // (terminated)
	);

	Lab7_SHARED_MEMORY shared_memory (
		.clk        (clk_clk),                                       //   clk1.clk
		.address    (mm_interconnect_0_shared_memory_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_shared_memory_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_shared_memory_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_shared_memory_s1_write),      //       .write
		.readdata   (mm_interconnect_0_shared_memory_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_shared_memory_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_shared_memory_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),            // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req),        //       .reset_req
		.freeze     (1'b0)                                           // (terminated)
	);

	Lab7_Timer1 timer1 (
		.clk        (clk_clk),                                //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        // reset.reset_n
		.address    (mm_interconnect_0_timer1_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer1_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer1_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer1_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer1_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver3_irq)                //   irq.irq
	);

	Lab7_Timer1 timer2 (
		.clk        (clk_clk),                                //   clk.clk
		.reset_n    (~rst_controller_003_reset_out_reset),    // reset.reset_n
		.address    (mm_interconnect_0_timer2_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer2_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer2_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer2_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer2_s1_write),     //      .write_n
		.irq        (irq_mapper_001_receiver0_irq)            //   irq.irq
	);

	Lab7_leds leds (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_leds_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_leds_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_leds_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_leds_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_leds_s1_readdata),   //                    .readdata
		.out_port   (leds_export)                           // external_connection.export
	);

	Lab7_pushbutton pushbutton (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_pushbutton_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pushbutton_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pushbutton_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pushbutton_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pushbutton_s1_readdata),   //                    .readdata
		.in_port    (pushbutton_export),                          // external_connection.export
		.irq        (irq_mapper_receiver1_irq)                    //                 irq.irq
	);

	Lab6 rooms_manager_0 (
		.writedata    (mm_interconnect_0_rooms_manager_0_avalon_slave_0_writedata),  // avalon_slave_0.writedata
		.wr           (mm_interconnect_0_rooms_manager_0_avalon_slave_0_write),      //               .write
		.cs           (mm_interconnect_0_rooms_manager_0_avalon_slave_0_chipselect), //               .chipselect
		.hexThree_out (rooms_hex2),                                                  //    conduit_end.hex2
		.hexOne_out   (rooms_hex1),                                                  //               .hex1
		.hexTwo_out   (rooms_hex3),                                                  //               .hex3
		.leds_out     (rooms_leds_out),                                              //               .leds_out
		.reset_reset  (rst_controller_reset_out_reset),                              //    reset_reset.reset
		.clk_clk      (clk_clk)                                                      //        clk_clk.clk
	);

	Lab7_sw_sliders sw_sliders (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_sw_sliders_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_sw_sliders_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_sw_sliders_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_sw_sliders_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_sw_sliders_s1_readdata),   //                    .readdata
		.in_port    (sw_sliders_export),                          // external_connection.export
		.irq        (irq_mapper_receiver0_irq)                    //                 irq.irq
	);

	Lab7_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                    (clk_clk),                                                     //                                  clk_0_clk.clk
		.Processor1_reset_reset_bridge_in_reset_reset     (rst_controller_reset_out_reset),                              //     Processor1_reset_reset_bridge_in_reset.reset
		.Processor2_reset_reset_bridge_in_reset_reset     (rst_controller_002_reset_out_reset),                          //     Processor2_reset_reset_bridge_in_reset.reset
		.RAM2_reset1_reset_bridge_in_reset_reset          (rst_controller_003_reset_out_reset),                          //          RAM2_reset1_reset_bridge_in_reset.reset
		.SHARED_MEMORY_reset1_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                          // SHARED_MEMORY_reset1_reset_bridge_in_reset.reset
		.Processor1_data_master_address                   (processor1_data_master_address),                              //                     Processor1_data_master.address
		.Processor1_data_master_waitrequest               (processor1_data_master_waitrequest),                          //                                           .waitrequest
		.Processor1_data_master_byteenable                (processor1_data_master_byteenable),                           //                                           .byteenable
		.Processor1_data_master_read                      (processor1_data_master_read),                                 //                                           .read
		.Processor1_data_master_readdata                  (processor1_data_master_readdata),                             //                                           .readdata
		.Processor1_data_master_write                     (processor1_data_master_write),                                //                                           .write
		.Processor1_data_master_writedata                 (processor1_data_master_writedata),                            //                                           .writedata
		.Processor1_data_master_debugaccess               (processor1_data_master_debugaccess),                          //                                           .debugaccess
		.Processor1_instruction_master_address            (processor1_instruction_master_address),                       //              Processor1_instruction_master.address
		.Processor1_instruction_master_waitrequest        (processor1_instruction_master_waitrequest),                   //                                           .waitrequest
		.Processor1_instruction_master_read               (processor1_instruction_master_read),                          //                                           .read
		.Processor1_instruction_master_readdata           (processor1_instruction_master_readdata),                      //                                           .readdata
		.Processor2_data_master_address                   (processor2_data_master_address),                              //                     Processor2_data_master.address
		.Processor2_data_master_waitrequest               (processor2_data_master_waitrequest),                          //                                           .waitrequest
		.Processor2_data_master_byteenable                (processor2_data_master_byteenable),                           //                                           .byteenable
		.Processor2_data_master_read                      (processor2_data_master_read),                                 //                                           .read
		.Processor2_data_master_readdata                  (processor2_data_master_readdata),                             //                                           .readdata
		.Processor2_data_master_write                     (processor2_data_master_write),                                //                                           .write
		.Processor2_data_master_writedata                 (processor2_data_master_writedata),                            //                                           .writedata
		.Processor2_data_master_debugaccess               (processor2_data_master_debugaccess),                          //                                           .debugaccess
		.Processor2_instruction_master_address            (processor2_instruction_master_address),                       //              Processor2_instruction_master.address
		.Processor2_instruction_master_waitrequest        (processor2_instruction_master_waitrequest),                   //                                           .waitrequest
		.Processor2_instruction_master_read               (processor2_instruction_master_read),                          //                                           .read
		.Processor2_instruction_master_readdata           (processor2_instruction_master_readdata),                      //                                           .readdata
		.Hex_1_2_s1_address                               (mm_interconnect_0_hex_1_2_s1_address),                        //                                 Hex_1_2_s1.address
		.Hex_1_2_s1_write                                 (mm_interconnect_0_hex_1_2_s1_write),                          //                                           .write
		.Hex_1_2_s1_readdata                              (mm_interconnect_0_hex_1_2_s1_readdata),                       //                                           .readdata
		.Hex_1_2_s1_writedata                             (mm_interconnect_0_hex_1_2_s1_writedata),                      //                                           .writedata
		.Hex_1_2_s1_chipselect                            (mm_interconnect_0_hex_1_2_s1_chipselect),                     //                                           .chipselect
		.Hex_3_4_s1_address                               (mm_interconnect_0_hex_3_4_s1_address),                        //                                 Hex_3_4_s1.address
		.Hex_3_4_s1_write                                 (mm_interconnect_0_hex_3_4_s1_write),                          //                                           .write
		.Hex_3_4_s1_readdata                              (mm_interconnect_0_hex_3_4_s1_readdata),                       //                                           .readdata
		.Hex_3_4_s1_writedata                             (mm_interconnect_0_hex_3_4_s1_writedata),                      //                                           .writedata
		.Hex_3_4_s1_chipselect                            (mm_interconnect_0_hex_3_4_s1_chipselect),                     //                                           .chipselect
		.Hex_5_6_s1_address                               (mm_interconnect_0_hex_5_6_s1_address),                        //                                 Hex_5_6_s1.address
		.Hex_5_6_s1_write                                 (mm_interconnect_0_hex_5_6_s1_write),                          //                                           .write
		.Hex_5_6_s1_readdata                              (mm_interconnect_0_hex_5_6_s1_readdata),                       //                                           .readdata
		.Hex_5_6_s1_writedata                             (mm_interconnect_0_hex_5_6_s1_writedata),                      //                                           .writedata
		.Hex_5_6_s1_chipselect                            (mm_interconnect_0_hex_5_6_s1_chipselect),                     //                                           .chipselect
		.JTAG_UART_avalon_jtag_slave_address              (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),       //                JTAG_UART_avalon_jtag_slave.address
		.JTAG_UART_avalon_jtag_slave_write                (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),         //                                           .write
		.JTAG_UART_avalon_jtag_slave_read                 (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),          //                                           .read
		.JTAG_UART_avalon_jtag_slave_readdata             (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),      //                                           .readdata
		.JTAG_UART_avalon_jtag_slave_writedata            (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),     //                                           .writedata
		.JTAG_UART_avalon_jtag_slave_waitrequest          (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),   //                                           .waitrequest
		.JTAG_UART_avalon_jtag_slave_chipselect           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),    //                                           .chipselect
		.leds_s1_address                                  (mm_interconnect_0_leds_s1_address),                           //                                    leds_s1.address
		.leds_s1_write                                    (mm_interconnect_0_leds_s1_write),                             //                                           .write
		.leds_s1_readdata                                 (mm_interconnect_0_leds_s1_readdata),                          //                                           .readdata
		.leds_s1_writedata                                (mm_interconnect_0_leds_s1_writedata),                         //                                           .writedata
		.leds_s1_chipselect                               (mm_interconnect_0_leds_s1_chipselect),                        //                                           .chipselect
		.MUTEX_s1_address                                 (mm_interconnect_0_mutex_s1_address),                          //                                   MUTEX_s1.address
		.MUTEX_s1_write                                   (mm_interconnect_0_mutex_s1_write),                            //                                           .write
		.MUTEX_s1_read                                    (mm_interconnect_0_mutex_s1_read),                             //                                           .read
		.MUTEX_s1_readdata                                (mm_interconnect_0_mutex_s1_readdata),                         //                                           .readdata
		.MUTEX_s1_writedata                               (mm_interconnect_0_mutex_s1_writedata),                        //                                           .writedata
		.MUTEX_s1_chipselect                              (mm_interconnect_0_mutex_s1_chipselect),                       //                                           .chipselect
		.Processor1_debug_mem_slave_address               (mm_interconnect_0_processor1_debug_mem_slave_address),        //                 Processor1_debug_mem_slave.address
		.Processor1_debug_mem_slave_write                 (mm_interconnect_0_processor1_debug_mem_slave_write),          //                                           .write
		.Processor1_debug_mem_slave_read                  (mm_interconnect_0_processor1_debug_mem_slave_read),           //                                           .read
		.Processor1_debug_mem_slave_readdata              (mm_interconnect_0_processor1_debug_mem_slave_readdata),       //                                           .readdata
		.Processor1_debug_mem_slave_writedata             (mm_interconnect_0_processor1_debug_mem_slave_writedata),      //                                           .writedata
		.Processor1_debug_mem_slave_byteenable            (mm_interconnect_0_processor1_debug_mem_slave_byteenable),     //                                           .byteenable
		.Processor1_debug_mem_slave_waitrequest           (mm_interconnect_0_processor1_debug_mem_slave_waitrequest),    //                                           .waitrequest
		.Processor1_debug_mem_slave_debugaccess           (mm_interconnect_0_processor1_debug_mem_slave_debugaccess),    //                                           .debugaccess
		.Processor2_debug_mem_slave_address               (mm_interconnect_0_processor2_debug_mem_slave_address),        //                 Processor2_debug_mem_slave.address
		.Processor2_debug_mem_slave_write                 (mm_interconnect_0_processor2_debug_mem_slave_write),          //                                           .write
		.Processor2_debug_mem_slave_read                  (mm_interconnect_0_processor2_debug_mem_slave_read),           //                                           .read
		.Processor2_debug_mem_slave_readdata              (mm_interconnect_0_processor2_debug_mem_slave_readdata),       //                                           .readdata
		.Processor2_debug_mem_slave_writedata             (mm_interconnect_0_processor2_debug_mem_slave_writedata),      //                                           .writedata
		.Processor2_debug_mem_slave_byteenable            (mm_interconnect_0_processor2_debug_mem_slave_byteenable),     //                                           .byteenable
		.Processor2_debug_mem_slave_waitrequest           (mm_interconnect_0_processor2_debug_mem_slave_waitrequest),    //                                           .waitrequest
		.Processor2_debug_mem_slave_debugaccess           (mm_interconnect_0_processor2_debug_mem_slave_debugaccess),    //                                           .debugaccess
		.pushbutton_s1_address                            (mm_interconnect_0_pushbutton_s1_address),                     //                              pushbutton_s1.address
		.pushbutton_s1_write                              (mm_interconnect_0_pushbutton_s1_write),                       //                                           .write
		.pushbutton_s1_readdata                           (mm_interconnect_0_pushbutton_s1_readdata),                    //                                           .readdata
		.pushbutton_s1_writedata                          (mm_interconnect_0_pushbutton_s1_writedata),                   //                                           .writedata
		.pushbutton_s1_chipselect                         (mm_interconnect_0_pushbutton_s1_chipselect),                  //                                           .chipselect
		.RAM1_s1_address                                  (mm_interconnect_0_ram1_s1_address),                           //                                    RAM1_s1.address
		.RAM1_s1_write                                    (mm_interconnect_0_ram1_s1_write),                             //                                           .write
		.RAM1_s1_readdata                                 (mm_interconnect_0_ram1_s1_readdata),                          //                                           .readdata
		.RAM1_s1_writedata                                (mm_interconnect_0_ram1_s1_writedata),                         //                                           .writedata
		.RAM1_s1_byteenable                               (mm_interconnect_0_ram1_s1_byteenable),                        //                                           .byteenable
		.RAM1_s1_chipselect                               (mm_interconnect_0_ram1_s1_chipselect),                        //                                           .chipselect
		.RAM1_s1_clken                                    (mm_interconnect_0_ram1_s1_clken),                             //                                           .clken
		.RAM2_s1_address                                  (mm_interconnect_0_ram2_s1_address),                           //                                    RAM2_s1.address
		.RAM2_s1_write                                    (mm_interconnect_0_ram2_s1_write),                             //                                           .write
		.RAM2_s1_readdata                                 (mm_interconnect_0_ram2_s1_readdata),                          //                                           .readdata
		.RAM2_s1_writedata                                (mm_interconnect_0_ram2_s1_writedata),                         //                                           .writedata
		.RAM2_s1_byteenable                               (mm_interconnect_0_ram2_s1_byteenable),                        //                                           .byteenable
		.RAM2_s1_chipselect                               (mm_interconnect_0_ram2_s1_chipselect),                        //                                           .chipselect
		.RAM2_s1_clken                                    (mm_interconnect_0_ram2_s1_clken),                             //                                           .clken
		.rooms_manager_0_avalon_slave_0_write             (mm_interconnect_0_rooms_manager_0_avalon_slave_0_write),      //             rooms_manager_0_avalon_slave_0.write
		.rooms_manager_0_avalon_slave_0_writedata         (mm_interconnect_0_rooms_manager_0_avalon_slave_0_writedata),  //                                           .writedata
		.rooms_manager_0_avalon_slave_0_chipselect        (mm_interconnect_0_rooms_manager_0_avalon_slave_0_chipselect), //                                           .chipselect
		.SHARED_MEMORY_s1_address                         (mm_interconnect_0_shared_memory_s1_address),                  //                           SHARED_MEMORY_s1.address
		.SHARED_MEMORY_s1_write                           (mm_interconnect_0_shared_memory_s1_write),                    //                                           .write
		.SHARED_MEMORY_s1_readdata                        (mm_interconnect_0_shared_memory_s1_readdata),                 //                                           .readdata
		.SHARED_MEMORY_s1_writedata                       (mm_interconnect_0_shared_memory_s1_writedata),                //                                           .writedata
		.SHARED_MEMORY_s1_byteenable                      (mm_interconnect_0_shared_memory_s1_byteenable),               //                                           .byteenable
		.SHARED_MEMORY_s1_chipselect                      (mm_interconnect_0_shared_memory_s1_chipselect),               //                                           .chipselect
		.SHARED_MEMORY_s1_clken                           (mm_interconnect_0_shared_memory_s1_clken),                    //                                           .clken
		.sw_sliders_s1_address                            (mm_interconnect_0_sw_sliders_s1_address),                     //                              sw_sliders_s1.address
		.sw_sliders_s1_write                              (mm_interconnect_0_sw_sliders_s1_write),                       //                                           .write
		.sw_sliders_s1_readdata                           (mm_interconnect_0_sw_sliders_s1_readdata),                    //                                           .readdata
		.sw_sliders_s1_writedata                          (mm_interconnect_0_sw_sliders_s1_writedata),                   //                                           .writedata
		.sw_sliders_s1_chipselect                         (mm_interconnect_0_sw_sliders_s1_chipselect),                  //                                           .chipselect
		.Timer1_s1_address                                (mm_interconnect_0_timer1_s1_address),                         //                                  Timer1_s1.address
		.Timer1_s1_write                                  (mm_interconnect_0_timer1_s1_write),                           //                                           .write
		.Timer1_s1_readdata                               (mm_interconnect_0_timer1_s1_readdata),                        //                                           .readdata
		.Timer1_s1_writedata                              (mm_interconnect_0_timer1_s1_writedata),                       //                                           .writedata
		.Timer1_s1_chipselect                             (mm_interconnect_0_timer1_s1_chipselect),                      //                                           .chipselect
		.Timer2_s1_address                                (mm_interconnect_0_timer2_s1_address),                         //                                  Timer2_s1.address
		.Timer2_s1_write                                  (mm_interconnect_0_timer2_s1_write),                           //                                           .write
		.Timer2_s1_readdata                               (mm_interconnect_0_timer2_s1_readdata),                        //                                           .readdata
		.Timer2_s1_writedata                              (mm_interconnect_0_timer2_s1_writedata),                       //                                           .writedata
		.Timer2_s1_chipselect                             (mm_interconnect_0_timer2_s1_chipselect)                       //                                           .chipselect
	);

	Lab7_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.sender_irq    (processor1_irq_irq)              //    sender.irq
	);

	Lab7_irq_mapper_001 irq_mapper_001 (
		.clk           (clk_clk),                            //       clk.clk
		.reset         (rst_controller_002_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_001_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),           // receiver1.irq
		.receiver2_irq (irq_mapper_receiver0_irq),           // receiver2.irq
		.receiver3_irq (irq_mapper_receiver2_irq),           // receiver3.irq
		.sender_irq    (processor2_irq_irq)                  //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (processor1_debug_reset_request_reset), // reset_in0.reset
		.reset_in1      (processor1_debug_reset_request_reset), // reset_in1.reset
		.clk            (clk_clk),                              //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),       // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),   //          .reset_req
		.reset_req_in0  (1'b0),                                 // (terminated)
		.reset_req_in1  (1'b0),                                 // (terminated)
		.reset_in2      (1'b0),                                 // (terminated)
		.reset_req_in2  (1'b0),                                 // (terminated)
		.reset_in3      (1'b0),                                 // (terminated)
		.reset_req_in3  (1'b0),                                 // (terminated)
		.reset_in4      (1'b0),                                 // (terminated)
		.reset_req_in4  (1'b0),                                 // (terminated)
		.reset_in5      (1'b0),                                 // (terminated)
		.reset_req_in5  (1'b0),                                 // (terminated)
		.reset_in6      (1'b0),                                 // (terminated)
		.reset_req_in6  (1'b0),                                 // (terminated)
		.reset_in7      (1'b0),                                 // (terminated)
		.reset_req_in7  (1'b0),                                 // (terminated)
		.reset_in8      (1'b0),                                 // (terminated)
		.reset_req_in8  (1'b0),                                 // (terminated)
		.reset_in9      (1'b0),                                 // (terminated)
		.reset_req_in9  (1'b0),                                 // (terminated)
		.reset_in10     (1'b0),                                 // (terminated)
		.reset_req_in10 (1'b0),                                 // (terminated)
		.reset_in11     (1'b0),                                 // (terminated)
		.reset_req_in11 (1'b0),                                 // (terminated)
		.reset_in12     (1'b0),                                 // (terminated)
		.reset_req_in12 (1'b0),                                 // (terminated)
		.reset_in13     (1'b0),                                 // (terminated)
		.reset_req_in13 (1'b0),                                 // (terminated)
		.reset_in14     (1'b0),                                 // (terminated)
		.reset_req_in14 (1'b0),                                 // (terminated)
		.reset_in15     (1'b0),                                 // (terminated)
		.reset_req_in15 (1'b0)                                  // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (processor1_debug_reset_request_reset),   // reset_in0.reset
		.reset_in1      (processor2_debug_reset_request_reset),   // reset_in1.reset
		.reset_in2      (processor1_debug_reset_request_reset),   // reset_in2.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (processor1_debug_reset_request_reset),   // reset_in0.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_002_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_in1      (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (processor1_debug_reset_request_reset),   // reset_in0.reset
		.reset_in1      (processor2_debug_reset_request_reset),   // reset_in1.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_003_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
